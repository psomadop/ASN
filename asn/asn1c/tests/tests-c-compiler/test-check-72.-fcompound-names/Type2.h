/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "ModuleTestSameNames"
 * 	found in "/Users/tasospsomadopoulos/Documents/asn1_sample/asn1c/tests/tests-asn1c-compiler/72-same-names-OK.asn1"
 * 	`asn1c -S /Users/tasospsomadopoulos/Documents/asn1_sample/asn1c/skeletons -flink-skeletons -Wdebug-compiler -fcompound-names`
 */

#ifndef	_Type2_H_
#define	_Type2_H_


#include <asn_application.h>

/* Including external dependencies */
#include <BIT_STRING.h>
#include <NativeInteger.h>
#include <constr_SEQUENCE.h>
#include <constr_SET.h>
#include <constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum Type2_PR {
	Type2_PR_NOTHING,	/* No components present */
	Type2_PR_one_name,
	Type2_PR_two_name
} Type2_PR;
typedef enum Type2__one_name__another_name__a {
	Type2__one_name__another_name__a_one	= 0
} e_Type2__one_name__another_name__a;

/*
 * Method of determining the components presence
 */
typedef enum Type2__two_name_PR {
	Type2__two_name_PR_another_name,	/* Member another_name is present */
} Type2__two_name_PR;
typedef enum Type2__two_name__another_name__a {
	Type2__two_name__another_name__a_one	= 0
} e_Type2__two_name__another_name__a;

/* Type2 */
typedef struct Type2 {
	Type2_PR present;
	union Type2_u {
		struct Type2__one_name {
			struct Type2__one_name__another_name {
				BIT_STRING_t	 a;
				long	 b;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} another_name;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} one_name;
		struct Type2__two_name {
			struct Type2__two_name__another_name {
				BIT_STRING_t	 a;
				long	 b;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} another_name;
			
			/* Presence bitmask: ASN_SET_ISPRESENT(ptwo_name, two_name_PR_x) */
			unsigned int _presence_map
				[((1+(8*sizeof(unsigned int))-1)/(8*sizeof(unsigned int)))];
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} two_name;
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Type2_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_Type2;
extern asn_CHOICE_specifics_t asn_SPC_Type2_specs_1;
extern asn_TYPE_member_t asn_MBR_Type2_1[2];
extern asn_per_constraints_t asn_PER_type_Type2_constr_1;

#ifdef __cplusplus
}
#endif

#endif	/* _Type2_H_ */
#include <asn_internal.h>
