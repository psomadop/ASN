// test schema file

include "include_test1.fbs";

struct InGlobalNamespace {}

namespace MyGame.Example;

// test case for negative enum values
enum neg_enum:int {
  neg1 = -12,
  neg2 = -11,
  neg3 = -10,
}

enum int_enum:int {
    intneg = -02,
    intneg2 = -1,
    int1 = 02,
    int2 = 42,
}

// test for hex constants
enum hex_enum:int {
    hexneg = -0x02,
    hex1 = 0x3,
    hex2 = 0x7eafbeaf,
}

attribute "priority";

enum Color:byte (bit_flags) { Red = 0, Green, Blue = 3, }

union Any { Monster, TestSimpleTableWithEnum }  // TODO: add more elements

struct Test { a:short; b:byte; }

struct emptystruct {}
table emptytable {}
table with_emptystruct { empty: emptystruct; }
enum notemptyenum:int { x}

table TestSimpleTableWithEnum {
  color: Color = Green;
  color2: Color = Color.Green;
  uc : ubyte = MyGame.Example.Color.Green;
  uc2 : ubyte = Color.Green;
}

table TestInclude {
  global:InGlobalNamespace;
  incval:MyGame.OtherNameSpace.FromInclude;
  incval2:MyGame.OtherNameSpace.FromInclude = IncludeVal;
  incval3 : int (included_attribute);
  incval4:MyGame.OtherNameSpace.FromInclude = MyGame.OtherNameSpace.FromInclude.IncludeVal;
  incval5: long = MyGame.OtherNameSpace.FromInclude.IncludeVal;
}

struct Vec3 (force_align: 16) {
  x:float;
  y:float;
  z:float;
  test1:double;
  test2:Color;
  test3:Test;
}

table Stat {
  id:string;
  val:long;
  count:ushort;
}

table TestJSONPrefixParsing
{
  aaaa: string;
  aaaa12345: uint;
  
  bbbb: string;
  bbbb1234: long;
  
  cccc: string;
  cccc1234: long;
  cccc12345: uint;
  
  dddd1234: long;
  dddd12345: uint;
}

// when there are two keys ending in same 8 character group
table TestJSONPrefixParsing2
{
    aaaa_bbbb_steps: long;
    aaaa_bbbb_start_: uint;
}

// when there are two keys ending in different 8 character group
table TestJSONPrefixParsing3
{
    aaaa_bbbb_steps: long;
    aaaa_bbbb_start_steps: uint;
}

table Monster {
  pos:Vec3 (id: 0);
  hp:short = 100 (id: 2);
  mana:short = 150 (id: 1);
  name:string (id: 3, required, key);
  color:Color = Blue (id: 6);
  inventory:[ubyte] (id: 5);
  friendly:bool = false (deprecated, priority: 1, id: 4);
  /// an example documentation comment: this will end up in the generated code
  /// multiline too
  testarrayoftables:[Monster] (id: 11);
  testarrayofstring:[string] (id: 10);
  testarrayofbools:[bool] (id: 24);
  enemy:MyGame.Example.Monster (id:12);  // Test referring by full namespace.
  // id 7 resever for Any_type
  test:Any (id: 8);
  test4:[Test] (id: 9);
  testnestedflatbuffer:[ubyte] (id:13, nested_flatbuffer: "Monster");
  testempty:Stat (id:14);
  testbool:bool = 1 (id:15);
  testhashs32_fnv1:int (id:16, hash:"fnv1_32");
  testhashu32_fnv1:uint (id:17, hash:"fnv1_32");
  testhashs64_fnv1:long (id:18, hash:"fnv1_64");
  testhashu64_fnv1:ulong (id:19, hash:"fnv1_64");
  testhashs32_fnv1a:int (id:20, hash:"fnv1a_32");
  testhashu32_fnv1a:uint (id:21, hash:"fnv1a_32");
  testhashs64_fnv1a:long (id:22, hash:"fnv1a_64");
  testhashu64_fnv1a:ulong (id:23, hash:"fnv1a_64");
  testjsonprefixparsing:TestJSONPrefixParsing (id:25);
  testjsonprefixparsing2:TestJSONPrefixParsing2 (id:26);
  testjsonprefixparsing3:TestJSONPrefixParsing3 (id:27);
  // id 28 reserver for manyany_type
  manyany: [Any] (id:29);
  testbase64:TestBase64 (id:30);
}

table TestBase64
{
    data:[ubyte] (base64);
    urldata:[ubyte] (base64url);
    nested:[ubyte] (nested_flatbuffer: "Monster", base64);
}

table TypeAliases {
    i8:int8;
    u8:uint8;
    i16:int16;
    u16:uint16;
    i32:int32;
    u32:uint32;
    i64:int64;
    u64:uint64;
    f32:float32;
    f64:float64;
    v8:[int8];
    vf64:[float64];
}

root_type MyGame.Example.Monster;

file_identifier "MONS";
file_extension "mon";
