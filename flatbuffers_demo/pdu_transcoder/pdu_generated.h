// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PDU_PDU_H_
#define FLATBUFFERS_GENERATED_PDU_PDU_H_

#include "flatbuffers/flatbuffers.h"

namespace PDU {

struct ComplexType;

struct Cell;

struct PDU;

enum CellType {
  CellType_INT = 0,
  CellType_BOOL = 1,
  CellType_NAME = 2,
  CellType_MESSAGE = 3,
  CellType_MIN = CellType_INT,
  CellType_MAX = CellType_MESSAGE
};

inline CellType (&EnumValuesCellType())[4] {
  static CellType values[] = {
    CellType_INT,
    CellType_BOOL,
    CellType_NAME,
    CellType_MESSAGE
  };
  return values;
}

inline const char **EnumNamesCellType() {
  static const char *names[] = {
    "INT",
    "BOOL",
    "NAME",
    "MESSAGE",
    nullptr
  };
  return names;
}

inline const char *EnumNameCellType(CellType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesCellType()[index];
}

struct ComplexType FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CLOCKTICKS = 4,
    VT_INTSEQUENCE = 6
  };
  uint32_t clockTicks() const {
    return GetField<uint32_t>(VT_CLOCKTICKS, 0);
  }
  const flatbuffers::Vector<int32_t> *intSequence() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INTSEQUENCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CLOCKTICKS) &&
           VerifyOffset(verifier, VT_INTSEQUENCE) &&
           verifier.Verify(intSequence()) &&
           verifier.EndTable();
  }
};

struct ComplexTypeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clockTicks(uint32_t clockTicks) {
    fbb_.AddElement<uint32_t>(ComplexType::VT_CLOCKTICKS, clockTicks, 0);
  }
  void add_intSequence(flatbuffers::Offset<flatbuffers::Vector<int32_t>> intSequence) {
    fbb_.AddOffset(ComplexType::VT_INTSEQUENCE, intSequence);
  }
  explicit ComplexTypeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ComplexTypeBuilder &operator=(const ComplexTypeBuilder &);
  flatbuffers::Offset<ComplexType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ComplexType>(end);
    return o;
  }
};

inline flatbuffers::Offset<ComplexType> CreateComplexType(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t clockTicks = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> intSequence = 0) {
  ComplexTypeBuilder builder_(_fbb);
  builder_.add_intSequence(intSequence);
  builder_.add_clockTicks(clockTicks);
  return builder_.Finish();
}

inline flatbuffers::Offset<ComplexType> CreateComplexTypeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t clockTicks = 0,
    const std::vector<int32_t> *intSequence = nullptr) {
  return PDU::CreateComplexType(
      _fbb,
      clockTicks,
      intSequence ? _fbb.CreateVector<int32_t>(*intSequence) : 0);
}

struct Cell FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_INTVAL = 6,
    VT_BOOLVAL = 8,
    VT_NAME = 10,
    VT_MSG = 12
  };
  CellType type() const {
    return static_cast<CellType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint32_t intVal() const {
    return GetField<uint32_t>(VT_INTVAL, 0);
  }
  bool boolVal() const {
    return GetField<uint8_t>(VT_BOOLVAL, 0) != 0;
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const ComplexType *msg() const {
    return GetPointer<const ComplexType *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_INTVAL) &&
           VerifyField<uint8_t>(verifier, VT_BOOLVAL) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyTable(msg()) &&
           verifier.EndTable();
  }
};

struct CellBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(CellType type) {
    fbb_.AddElement<int8_t>(Cell::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_intVal(uint32_t intVal) {
    fbb_.AddElement<uint32_t>(Cell::VT_INTVAL, intVal, 0);
  }
  void add_boolVal(bool boolVal) {
    fbb_.AddElement<uint8_t>(Cell::VT_BOOLVAL, static_cast<uint8_t>(boolVal), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Cell::VT_NAME, name);
  }
  void add_msg(flatbuffers::Offset<ComplexType> msg) {
    fbb_.AddOffset(Cell::VT_MSG, msg);
  }
  explicit CellBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CellBuilder &operator=(const CellBuilder &);
  flatbuffers::Offset<Cell> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cell>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cell> CreateCell(
    flatbuffers::FlatBufferBuilder &_fbb,
    CellType type = CellType_INT,
    uint32_t intVal = 0,
    bool boolVal = false,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<ComplexType> msg = 0) {
  CellBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_name(name);
  builder_.add_intVal(intVal);
  builder_.add_boolVal(boolVal);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cell> CreateCellDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    CellType type = CellType_INT,
    uint32_t intVal = 0,
    bool boolVal = false,
    const char *name = nullptr,
    flatbuffers::Offset<ComplexType> msg = 0) {
  return PDU::CreateCell(
      _fbb,
      type,
      intVal,
      boolVal,
      name ? _fbb.CreateString(name) : 0,
      msg);
}

struct PDU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CELLS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Cell>> *cells() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Cell>> *>(VT_CELLS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CELLS) &&
           verifier.Verify(cells()) &&
           verifier.VerifyVectorOfTables(cells()) &&
           verifier.EndTable();
  }
};

struct PDUBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cells(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Cell>>> cells) {
    fbb_.AddOffset(PDU::VT_CELLS, cells);
  }
  explicit PDUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PDUBuilder &operator=(const PDUBuilder &);
  flatbuffers::Offset<PDU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PDU>(end);
    return o;
  }
};

inline flatbuffers::Offset<PDU> CreatePDU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Cell>>> cells = 0) {
  PDUBuilder builder_(_fbb);
  builder_.add_cells(cells);
  return builder_.Finish();
}

inline flatbuffers::Offset<PDU> CreatePDUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Cell>> *cells = nullptr) {
  return PDU::CreatePDU(
      _fbb,
      cells ? _fbb.CreateVector<flatbuffers::Offset<Cell>>(*cells) : 0);
}

inline const PDU::PDU *GetPDU(const void *buf) {
  return flatbuffers::GetRoot<PDU::PDU>(buf);
}

inline bool VerifyPDUBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PDU::PDU>(nullptr);
}

inline void FinishPDUBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PDU::PDU> root) {
  fbb.Finish(root);
}

}  // namespace PDU

#endif  // FLATBUFFERS_GENERATED_PDU_PDU_H_
