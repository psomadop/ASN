// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdu.proto

#ifndef PROTOBUF_pdu_2eproto__INCLUDED
#define PROTOBUF_pdu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pdu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsComplexTypeImpl();
void InitDefaultsComplexType();
void InitDefaultsCellImpl();
void InitDefaultsCell();
void InitDefaultsPDUImpl();
void InitDefaultsPDU();
inline void InitDefaults() {
  InitDefaultsComplexType();
  InitDefaultsCell();
  InitDefaultsPDU();
}
}  // namespace protobuf_pdu_2eproto
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class ComplexType;
class ComplexTypeDefaultTypeInternal;
extern ComplexTypeDefaultTypeInternal _ComplexType_default_instance_;
class PDU;
class PDUDefaultTypeInternal;
extern PDUDefaultTypeInternal _PDU_default_instance_;

enum CellType {
  CELLTYPE_INT = 0,
  CELLTYPE_BOOL = 1,
  CELLTYPE_NAME = 2,
  CELLTYPE_MESSAGE = 3,
  CellType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CellType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CellType_IsValid(int value);
const CellType CellType_MIN = CELLTYPE_INT;
const CellType CellType_MAX = CELLTYPE_MESSAGE;
const int CellType_ARRAYSIZE = CellType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CellType_descriptor();
inline const ::std::string& CellType_Name(CellType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CellType_descriptor(), value);
}
inline bool CellType_Parse(
    const ::std::string& name, CellType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CellType>(
    CellType_descriptor(), name, value);
}
// ===================================================================

class ComplexType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ComplexType) */ {
 public:
  ComplexType();
  virtual ~ComplexType();

  ComplexType(const ComplexType& from);

  inline ComplexType& operator=(const ComplexType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComplexType(ComplexType&& from) noexcept
    : ComplexType() {
    *this = ::std::move(from);
  }

  inline ComplexType& operator=(ComplexType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComplexType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComplexType* internal_default_instance() {
    return reinterpret_cast<const ComplexType*>(
               &_ComplexType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ComplexType* other);
  friend void swap(ComplexType& a, ComplexType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComplexType* New() const PROTOBUF_FINAL { return New(NULL); }

  ComplexType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComplexType& from);
  void MergeFrom(const ComplexType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComplexType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 intSequence = 2;
  int intsequence_size() const;
  void clear_intsequence();
  static const int kIntSequenceFieldNumber = 2;
  ::google::protobuf::uint32 intsequence(int index) const;
  void set_intsequence(int index, ::google::protobuf::uint32 value);
  void add_intsequence(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      intsequence() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_intsequence();

  // uint32 clockTicks = 1;
  void clear_clockticks();
  static const int kClockTicksFieldNumber = 1;
  ::google::protobuf::uint32 clockticks() const;
  void set_clockticks(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ComplexType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > intsequence_;
  mutable int _intsequence_cached_byte_size_;
  ::google::protobuf::uint32 clockticks_;
  mutable int _cached_size_;
  friend struct ::protobuf_pdu_2eproto::TableStruct;
  friend void ::protobuf_pdu_2eproto::InitDefaultsComplexTypeImpl();
};
// -------------------------------------------------------------------

class Cell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cell) */ {
 public:
  Cell();
  virtual ~Cell();

  Cell(const Cell& from);

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(Cell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Cell* other);
  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cell* New() const PROTOBUF_FINAL { return New(NULL); }

  Cell* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ComplexType msg = 5;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::ComplexType& msg() const;
  ::ComplexType* release_msg();
  ::ComplexType* mutable_msg();
  void set_allocated_msg(::ComplexType* msg);

  // .CellType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::CellType type() const;
  void set_type(::CellType value);

  // uint32 intVal = 2;
  void clear_intval();
  static const int kIntValFieldNumber = 2;
  ::google::protobuf::uint32 intval() const;
  void set_intval(::google::protobuf::uint32 value);

  // bool boolVal = 3;
  void clear_boolval();
  static const int kBoolValFieldNumber = 3;
  bool boolval() const;
  void set_boolval(bool value);

  // @@protoc_insertion_point(class_scope:Cell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ComplexType* msg_;
  int type_;
  ::google::protobuf::uint32 intval_;
  bool boolval_;
  mutable int _cached_size_;
  friend struct ::protobuf_pdu_2eproto::TableStruct;
  friend void ::protobuf_pdu_2eproto::InitDefaultsCellImpl();
};
// -------------------------------------------------------------------

class PDU : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PDU) */ {
 public:
  PDU();
  virtual ~PDU();

  PDU(const PDU& from);

  inline PDU& operator=(const PDU& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PDU(PDU&& from) noexcept
    : PDU() {
    *this = ::std::move(from);
  }

  inline PDU& operator=(PDU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PDU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDU* internal_default_instance() {
    return reinterpret_cast<const PDU*>(
               &_PDU_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PDU* other);
  friend void swap(PDU& a, PDU& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PDU* New() const PROTOBUF_FINAL { return New(NULL); }

  PDU* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PDU& from);
  void MergeFrom(const PDU& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PDU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cell cells = 1;
  int cells_size() const;
  void clear_cells();
  static const int kCellsFieldNumber = 1;
  const ::Cell& cells(int index) const;
  ::Cell* mutable_cells(int index);
  ::Cell* add_cells();
  ::google::protobuf::RepeatedPtrField< ::Cell >*
      mutable_cells();
  const ::google::protobuf::RepeatedPtrField< ::Cell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:PDU)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cell > cells_;
  mutable int _cached_size_;
  friend struct ::protobuf_pdu_2eproto::TableStruct;
  friend void ::protobuf_pdu_2eproto::InitDefaultsPDUImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComplexType

// uint32 clockTicks = 1;
inline void ComplexType::clear_clockticks() {
  clockticks_ = 0u;
}
inline ::google::protobuf::uint32 ComplexType::clockticks() const {
  // @@protoc_insertion_point(field_get:ComplexType.clockTicks)
  return clockticks_;
}
inline void ComplexType::set_clockticks(::google::protobuf::uint32 value) {
  
  clockticks_ = value;
  // @@protoc_insertion_point(field_set:ComplexType.clockTicks)
}

// repeated uint32 intSequence = 2;
inline int ComplexType::intsequence_size() const {
  return intsequence_.size();
}
inline void ComplexType::clear_intsequence() {
  intsequence_.Clear();
}
inline ::google::protobuf::uint32 ComplexType::intsequence(int index) const {
  // @@protoc_insertion_point(field_get:ComplexType.intSequence)
  return intsequence_.Get(index);
}
inline void ComplexType::set_intsequence(int index, ::google::protobuf::uint32 value) {
  intsequence_.Set(index, value);
  // @@protoc_insertion_point(field_set:ComplexType.intSequence)
}
inline void ComplexType::add_intsequence(::google::protobuf::uint32 value) {
  intsequence_.Add(value);
  // @@protoc_insertion_point(field_add:ComplexType.intSequence)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ComplexType::intsequence() const {
  // @@protoc_insertion_point(field_list:ComplexType.intSequence)
  return intsequence_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ComplexType::mutable_intsequence() {
  // @@protoc_insertion_point(field_mutable_list:ComplexType.intSequence)
  return &intsequence_;
}

// -------------------------------------------------------------------

// Cell

// .CellType type = 1;
inline void Cell::clear_type() {
  type_ = 0;
}
inline ::CellType Cell::type() const {
  // @@protoc_insertion_point(field_get:Cell.type)
  return static_cast< ::CellType >(type_);
}
inline void Cell::set_type(::CellType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Cell.type)
}

// uint32 intVal = 2;
inline void Cell::clear_intval() {
  intval_ = 0u;
}
inline ::google::protobuf::uint32 Cell::intval() const {
  // @@protoc_insertion_point(field_get:Cell.intVal)
  return intval_;
}
inline void Cell::set_intval(::google::protobuf::uint32 value) {
  
  intval_ = value;
  // @@protoc_insertion_point(field_set:Cell.intVal)
}

// bool boolVal = 3;
inline void Cell::clear_boolval() {
  boolval_ = false;
}
inline bool Cell::boolval() const {
  // @@protoc_insertion_point(field_get:Cell.boolVal)
  return boolval_;
}
inline void Cell::set_boolval(bool value) {
  
  boolval_ = value;
  // @@protoc_insertion_point(field_set:Cell.boolVal)
}

// string name = 4;
inline void Cell::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cell::name() const {
  // @@protoc_insertion_point(field_get:Cell.name)
  return name_.GetNoArena();
}
inline void Cell::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cell.name)
}
#if LANG_CXX11
inline void Cell::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cell.name)
}
#endif
inline void Cell::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cell.name)
}
inline void Cell::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cell.name)
}
inline ::std::string* Cell::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Cell.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cell::release_name() {
  // @@protoc_insertion_point(field_release:Cell.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cell.name)
}

// .ComplexType msg = 5;
inline bool Cell::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
inline void Cell::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) {
    delete msg_;
  }
  msg_ = NULL;
}
inline const ::ComplexType& Cell::msg() const {
  const ::ComplexType* p = msg_;
  // @@protoc_insertion_point(field_get:Cell.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::ComplexType*>(
      &::_ComplexType_default_instance_);
}
inline ::ComplexType* Cell::release_msg() {
  // @@protoc_insertion_point(field_release:Cell.msg)
  
  ::ComplexType* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::ComplexType* Cell::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::ComplexType;
  }
  // @@protoc_insertion_point(field_mutable:Cell.msg)
  return msg_;
}
inline void Cell::set_allocated_msg(::ComplexType* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msg_;
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:Cell.msg)
}

// -------------------------------------------------------------------

// PDU

// repeated .Cell cells = 1;
inline int PDU::cells_size() const {
  return cells_.size();
}
inline void PDU::clear_cells() {
  cells_.Clear();
}
inline const ::Cell& PDU::cells(int index) const {
  // @@protoc_insertion_point(field_get:PDU.cells)
  return cells_.Get(index);
}
inline ::Cell* PDU::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:PDU.cells)
  return cells_.Mutable(index);
}
inline ::Cell* PDU::add_cells() {
  // @@protoc_insertion_point(field_add:PDU.cells)
  return cells_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cell >*
PDU::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:PDU.cells)
  return &cells_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cell >&
PDU::cells() const {
  // @@protoc_insertion_point(field_list:PDU.cells)
  return cells_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CellType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CellType>() {
  return ::CellType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pdu_2eproto__INCLUDED
