// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdu.proto

#include "pdu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class ComplexTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComplexType>
      _instance;
} _ComplexType_default_instance_;
class CellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cell>
      _instance;
} _Cell_default_instance_;
class PDUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PDU>
      _instance;
} _PDU_default_instance_;
namespace protobuf_pdu_2eproto {
void InitDefaultsComplexTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ComplexType_default_instance_;
    new (ptr) ::ComplexType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ComplexType::InitAsDefaultInstance();
}

void InitDefaultsComplexType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsComplexTypeImpl);
}

void InitDefaultsCellImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pdu_2eproto::InitDefaultsComplexType();
  {
    void* ptr = &::_Cell_default_instance_;
    new (ptr) ::Cell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Cell::InitAsDefaultInstance();
}

void InitDefaultsCell() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCellImpl);
}

void InitDefaultsPDUImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pdu_2eproto::InitDefaultsCell();
  {
    void* ptr = &::_PDU_default_instance_;
    new (ptr) ::PDU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PDU::InitAsDefaultInstance();
}

void InitDefaultsPDU() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPDUImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ComplexType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ComplexType, clockticks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ComplexType, intsequence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cell, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cell, intval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cell, boolval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cell, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cell, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PDU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PDU, cells_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ComplexType)},
  { 7, -1, sizeof(::Cell)},
  { 17, -1, sizeof(::PDU)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ComplexType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Cell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PDU_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pdu.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tpdu.proto\"6\n\013ComplexType\022\022\n\nclockTicks"
      "\030\001 \001(\r\022\023\n\013intSequence\030\002 \003(\r\"i\n\004Cell\022\027\n\004t"
      "ype\030\001 \001(\0162\t.CellType\022\016\n\006intVal\030\002 \001(\r\022\017\n\007"
      "boolVal\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\022\031\n\003msg\030\005 \001(\013"
      "2\014.ComplexType\"\033\n\003PDU\022\024\n\005cells\030\001 \003(\0132\005.C"
      "ell*\\\n\010CellType\022\021\n\rCELL_TYPE_INT\020\000\022\022\n\016CE"
      "LL_TYPE_BOOL\020\001\022\022\n\016CELL_TYPE_NAME\020\002\022\025\n\021CE"
      "LL_TYPE_MESSAGE\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pdu.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pdu_2eproto
const ::google::protobuf::EnumDescriptor* CellType_descriptor() {
  protobuf_pdu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pdu_2eproto::file_level_enum_descriptors[0];
}
bool CellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ComplexType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexType::kClockTicksFieldNumber;
const int ComplexType::kIntSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexType::ComplexType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pdu_2eproto::InitDefaultsComplexType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComplexType)
}
ComplexType::ComplexType(const ComplexType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      intsequence_(from.intsequence_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clockticks_ = from.clockticks_;
  // @@protoc_insertion_point(copy_constructor:ComplexType)
}

void ComplexType::SharedCtor() {
  clockticks_ = 0u;
  _cached_size_ = 0;
}

ComplexType::~ComplexType() {
  // @@protoc_insertion_point(destructor:ComplexType)
  SharedDtor();
}

void ComplexType::SharedDtor() {
}

void ComplexType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexType::descriptor() {
  ::protobuf_pdu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComplexType& ComplexType::default_instance() {
  ::protobuf_pdu_2eproto::InitDefaultsComplexType();
  return *internal_default_instance();
}

ComplexType* ComplexType::New(::google::protobuf::Arena* arena) const {
  ComplexType* n = new ComplexType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexType::Clear() {
// @@protoc_insertion_point(message_clear_start:ComplexType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intsequence_.Clear();
  clockticks_ = 0u;
  _internal_metadata_.Clear();
}

bool ComplexType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComplexType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 clockTicks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clockticks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 intSequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_intsequence())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_intsequence())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComplexType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComplexType)
  return false;
#undef DO_
}

void ComplexType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComplexType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clockTicks = 1;
  if (this->clockticks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clockticks(), output);
  }

  // repeated uint32 intSequence = 2;
  if (this->intsequence_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _intsequence_cached_byte_size_));
  }
  for (int i = 0, n = this->intsequence_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->intsequence(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ComplexType)
}

::google::protobuf::uint8* ComplexType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ComplexType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clockTicks = 1;
  if (this->clockticks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clockticks(), target);
  }

  // repeated uint32 intSequence = 2;
  if (this->intsequence_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _intsequence_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->intsequence_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComplexType)
  return target;
}

size_t ComplexType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComplexType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 intSequence = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->intsequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intsequence_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 clockTicks = 1;
  if (this->clockticks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clockticks());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ComplexType)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ComplexType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ComplexType)
    MergeFrom(*source);
  }
}

void ComplexType::MergeFrom(const ComplexType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ComplexType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intsequence_.MergeFrom(from.intsequence_);
  if (from.clockticks() != 0) {
    set_clockticks(from.clockticks());
  }
}

void ComplexType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ComplexType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexType::CopyFrom(const ComplexType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComplexType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexType::IsInitialized() const {
  return true;
}

void ComplexType::Swap(ComplexType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexType::InternalSwap(ComplexType* other) {
  using std::swap;
  intsequence_.InternalSwap(&other->intsequence_);
  swap(clockticks_, other->clockticks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexType::GetMetadata() const {
  protobuf_pdu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdu_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Cell::InitAsDefaultInstance() {
  ::_Cell_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ComplexType*>(
      ::ComplexType::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cell::kTypeFieldNumber;
const int Cell::kIntValFieldNumber;
const int Cell::kBoolValFieldNumber;
const int Cell::kNameFieldNumber;
const int Cell::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pdu_2eproto::InitDefaultsCell();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cell)
}
Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_msg()) {
    msg_ = new ::ComplexType(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&boolval_) -
    reinterpret_cast<char*>(&type_)) + sizeof(boolval_));
  // @@protoc_insertion_point(copy_constructor:Cell)
}

void Cell::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boolval_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(boolval_));
  _cached_size_ = 0;
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msg_;
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  ::protobuf_pdu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cell& Cell::default_instance() {
  ::protobuf_pdu_2eproto::InitDefaultsCell();
  return *internal_default_instance();
}

Cell* Cell::New(::google::protobuf::Arena* arena) const {
  Cell* n = new Cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) {
    delete msg_;
  }
  msg_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boolval_) -
      reinterpret_cast<char*>(&type_)) + sizeof(boolval_));
  _internal_metadata_.Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CellType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CellType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 intVal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolVal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Cell.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ComplexType msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CellType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 intVal = 2;
  if (this->intval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intval(), output);
  }

  // bool boolVal = 3;
  if (this->boolval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->boolval(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Cell.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // .ComplexType msg = 5;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->msg_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Cell)
}

::google::protobuf::uint8* Cell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CellType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 intVal = 2;
  if (this->intval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intval(), target);
  }

  // bool boolVal = 3;
  if (this->boolval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->boolval(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Cell.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // .ComplexType msg = 5;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->msg_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cell)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .ComplexType msg = 5;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->msg_);
  }

  // .CellType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 intVal = 2;
  if (this->intval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intval());
  }

  // bool boolVal = 3;
  if (this->boolval() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Cell)
  GOOGLE_DCHECK_NE(&from, this);
  const Cell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Cell)
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_msg()) {
    mutable_msg()->::ComplexType::MergeFrom(from.msg());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.intval() != 0) {
    set_intval(from.intval());
  }
  if (from.boolval() != 0) {
    set_boolval(from.boolval());
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(msg_, other->msg_);
  swap(type_, other->type_);
  swap(intval_, other->intval_);
  swap(boolval_, other->boolval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_pdu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdu_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PDU::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PDU::kCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PDU::PDU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pdu_2eproto::InitDefaultsPDU();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PDU)
}
PDU::PDU(const PDU& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cells_(from.cells_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PDU)
}

void PDU::SharedCtor() {
  _cached_size_ = 0;
}

PDU::~PDU() {
  // @@protoc_insertion_point(destructor:PDU)
  SharedDtor();
}

void PDU::SharedDtor() {
}

void PDU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDU::descriptor() {
  ::protobuf_pdu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PDU& PDU::default_instance() {
  ::protobuf_pdu_2eproto::InitDefaultsPDU();
  return *internal_default_instance();
}

PDU* PDU::New(::google::protobuf::Arena* arena) const {
  PDU* n = new PDU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PDU::Clear() {
// @@protoc_insertion_point(message_clear_start:PDU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  _internal_metadata_.Clear();
}

bool PDU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PDU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cell cells = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PDU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PDU)
  return false;
#undef DO_
}

void PDU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PDU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Cell cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cells(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PDU)
}

::google::protobuf::uint8* PDU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PDU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Cell cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cells(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PDU)
  return target;
}

size_t PDU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PDU)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Cell cells = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cells(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PDU)
  GOOGLE_DCHECK_NE(&from, this);
  const PDU* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PDU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PDU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PDU)
    MergeFrom(*source);
  }
}

void PDU::MergeFrom(const PDU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PDU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
}

void PDU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PDU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDU::CopyFrom(const PDU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PDU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDU::IsInitialized() const {
  return true;
}

void PDU::Swap(PDU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PDU::InternalSwap(PDU* other) {
  using std::swap;
  cells_.InternalSwap(&other->cells_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PDU::GetMetadata() const {
  protobuf_pdu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdu_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
